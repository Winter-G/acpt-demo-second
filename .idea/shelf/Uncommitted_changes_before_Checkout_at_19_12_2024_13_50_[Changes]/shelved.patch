Index: src/main/java/com/example/second/controller/OrderFormController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.second.controller;\r\n\r\nimport com.example.second.dto.OrderDetailDto;\r\nimport com.example.second.dto.OrderDto;\r\nimport com.example.second.model.OrderModel;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.TextField;\r\nimport com.example.second.tm.ItemTM;\r\nimport com.example.second.dto.VehicleDto;\r\nimport com.example.second.model.VehicleModel;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\n\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class OrderFormController implements Initializable {\r\n\r\n    @FXML\r\n    private TableView<ItemTM> tblOrder;\r\n\r\n    @FXML\r\n    private TextField txtBrand;\r\n\r\n    @FXML\r\n    private TextField txtId;\r\n\r\n    @FXML\r\n    private TextField txtModel;\r\n\r\n    @FXML\r\n    private TextField txtPrice;\r\n\r\n    @FXML\r\n    private TextField txtQtyOnHand;\r\n\r\n    @FXML\r\n    private TextField txtQty;\r\n\r\n    @FXML\r\n    private Label lblSubTotal;\r\n\r\n    // Change List to ObservableList\r\n//    private ObservableList<ItemTM> itemTMS;\r\n\r\n//    private List<ItemTM> itemTMS;\r\n\r\n    private List<ItemTM> itemTMS = FXCollections.observableArrayList();\r\n\r\n    private ArrayList<OrderDetailDto> orderDetailDtos = new ArrayList<>();\r\n\r\n    private double subTotal = 0.0;\r\n\r\n\r\n\r\n    @FXML\r\n    void addToCart(ActionEvent event) {\r\n        try {\r\n            // Get the input values\r\n            String brand = txtBrand.getText();\r\n            String model = txtModel.getText();\r\n            int qty = Integer.parseInt(txtQty.getText());\r\n            double unitPrice = Double.parseDouble(txtPrice.getText());\r\n            double total = unitPrice * qty;\r\n\r\n            // Calculate sub-total\r\n            subTotal += total;\r\n\r\n            // Set sub-total at the label\r\n            lblSubTotal.setText(String.valueOf(subTotal));\r\n\r\n            // Add the new item to the ObservableList\r\n            itemTMS.add(new ItemTM(brand, model,qty,unitPrice,total));\r\n\r\n            int id = Integer.parseInt(txtId.getText());\r\n\r\n            // Add order details to the list\r\n            orderDetailDtos.add(new OrderDetailDto(id, qty, total));\r\n\r\n\r\n            // Update the TableView by setting the ObservableList\r\n            tblOrder.setItems(FXCollections.observableArrayList(itemTMS)); // Wrap itemTMS again into an ObservableList\r\n\r\n\r\n\r\n            // Create a new ItemTM object\r\n//            ItemTM newItem = new ItemTM(brand, model, qty, unitPrice, total);\r\n\r\n            // Add the new item to itemTMS\r\n//            itemTMS.add(newItem);\r\n\r\n            // Update TableView with the new item\r\n//            tblOrder.setItems(itemTMS);\r\n\r\n            // Clear qty input field\r\n            txtQty.clear();\r\n\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"Invalid input.\");\r\n        }\r\n    }\r\n\r\n\r\n    @FXML\r\n    void placeOrder(ActionEvent event) throws SQLException, ClassNotFoundException {\r\n//        DateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n//        Date date = new Date();\r\n//        String format = dateFormat.format(date);\r\n\r\n        DateFormat mysqlDateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        Date date = new Date();\r\n        String formattedDate = mysqlDateFormat.format(date);\r\n\r\n        // Create an OrderDto with the current date, total cost, and order details,\r\n        // then pass it to the OrderModel to place the order.\r\n        try {\r\n            boolean orderPlaced = OrderModel.placeOrder(new OrderDto(formattedDate, subTotal, orderDetailDtos));\r\n            if (orderPlaced) {\r\n                System.out.println(\"Order Placed\");\r\n            } else {\r\n                System.out.println(\"Order Not Placed\");\r\n            }\r\n        } catch (SQLException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"An error occurred while placing the order.\");\r\n        }\r\n\r\n    }\r\n\r\n        @FXML\r\n    void search(ActionEvent event) {\r\n        int id = Integer.parseInt(txtId.getText());\r\n\r\n        VehicleDto vehicle = VehicleModel.searchVehicle(id); // Example ID\r\n\r\n        txtBrand.setText(vehicle.getBrand());\r\n        txtModel.setText(vehicle.getModel());\r\n        txtQtyOnHand.setText(String.valueOf(vehicle.getQty()));\r\n        txtPrice.setText(String.valueOf(vehicle.getPrice()));\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n\r\n        tblOrder.getColumns().get(0).setCellValueFactory(new PropertyValueFactory<>(\"brand\"));\r\n        tblOrder.getColumns().get(1).setCellValueFactory(new PropertyValueFactory<>(\"model\"));\r\n        tblOrder.getColumns().get(2).setCellValueFactory(new PropertyValueFactory<>(\"qty\"));\r\n        tblOrder.getColumns().get(3).setCellValueFactory(new PropertyValueFactory<>(\"unitPrice\"));\r\n        tblOrder.getColumns().get(4).setCellValueFactory(new PropertyValueFactory<>(\"total\"));\r\n\r\n        // Set the ObservableList to TableView once during initialization\r\n        // tblOrder.setItems((ObservableList<ItemTM>) itemTMS);\r\n\r\n        itemTMS = new ArrayList<>();\r\n\r\n        orderDetailDtos = new ArrayList<>();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/second/controller/OrderFormController.java b/src/main/java/com/example/second/controller/OrderFormController.java
--- a/src/main/java/com/example/second/controller/OrderFormController.java	(revision b0546efa2d8aac7a5c77a1c66263b0e588164d0a)
+++ b/src/main/java/com/example/second/controller/OrderFormController.java	(date 1734596405526)
@@ -128,6 +128,7 @@
             boolean orderPlaced = OrderModel.placeOrder(new OrderDto(formattedDate, subTotal, orderDetailDtos));
             if (orderPlaced) {
                 System.out.println("Order Placed");
+                
             } else {
                 System.out.println("Order Not Placed");
             }
